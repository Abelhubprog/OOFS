# Multi-stage build for production-optimized Rust binaries
FROM rust:1.79-slim-bookworm AS builder

# Install system dependencies required for building
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    libpq-dev \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Create app directory
WORKDIR /app

# Copy manifests
COPY Cargo.toml Cargo.lock ./
COPY crates/ ./crates/
COPY db/ ./db/

# Build dependencies (this layer will be cached)
RUN cargo build --release --bin api

# Runtime stage
FROM debian:bookworm-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    libssl3 \
    libpq5 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create app user
RUN groupadd -r app && useradd -r -g app -d /app -s /bin/bash -c "App user" app

# Create app directory
WORKDIR /app

# Copy binary from builder stage
COPY --from=builder /app/target/release/api /usr/local/bin/api

# Copy db migrations and queries
COPY --from=builder /app/db ./db

# Change ownership
RUN chown -R app:app /app

# Switch to app user
USER app

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Expose port
EXPOSE 8080

# Set build info environment variables
ARG GIT_HASH=unknown
ARG BUILD_TIME=unknown
ARG RUSTC_VERSION=unknown
ENV GIT_HASH=${GIT_HASH}
ENV BUILD_TIME=${BUILD_TIME}
ENV RUSTC_VERSION=${RUSTC_VERSION}

# Start the application
ENTRYPOINT ["/usr/local/bin/api"]
